使用不可变对象，无需使用额外的同步方式

### 1. 什么是不可变对象

不可变对象指的是那些一旦创建，其状态就不在改变的对象，比如说String对象

### 2. 创建一个不可变对象
- 不可变对象在创建之后就不能发生改变，任何对他的改变都是返回一个新的对象
- 所有的属性都应该是final 的
- 对象应该要被正确的创建，对象引用不能被泄露
-  对象英爱是final 的，防止子类改变了父类的不可变属性
- 如果包含可变对象，那么在放回客户端时应该返回该对象的一个拷贝，而不是对象本身

使用Immutable类的好处：
1）Immutable对象是线程安全的，可以不用被synchronize就在并发环境中共享

2）Immutable对象简化了程序开发，因为它无需使用额外的锁机制就可以在线程间共享

3）Immutable对象提高了程序的性能，因为它减少了synchroinzed的使用

4）Immutable对象是可以被重复使用的，你可以将它们缓存起来重复使用，就像字符串字面量和整型数字一样。你可以使用静态工厂方法来提供类似于valueOf（）这样的方法，它可以从缓存中返回一个已经存在的Immutable对象，而不是重新创建一个。

immutable也有一个缺点就是会制造大量垃圾，
由于他们不能被重用而且对于它们的使用就是”用“然后”扔“
，字符串就是一个典型的例子，它会创造很多的垃圾，给垃圾收集带来很大的麻烦。当然这只是个极端的例子，合理的使用immutable对象会创造很大的价值。



### 不可变对象的涉及模式
 在整个的不可变对象的设计模式中存在三个角色
- 调用者，即client 来使用不可变对象
- 不可变的对象
> getN,getX 返回不可变对象所维护的先关状态的值，这些变量需要在构造器中实现初始化。同时还要提供类似getStateSnapshot 返回不可变对象所维护的一组状态的快照

- Manipulator :  负责不可变对象的维护和更新，当现实的实体类发生改变时，生成新的不可变对象，来反映新的变化
> 需要提供类似changeStateTO(）类似方法，生成新的不可变对象



###  具体的示例

该系统模拟了一个彩信网关系统，系统中主要存下一下的角色

业务人员 ---- >client 不可变对象的调用者
MMSCRouter ,MMSCInfo ---- > 不可变对象
OMCAgent ----- >Manipulator 用于生成不可变对象

在整个系统中，client需要调用MMSRouter 更具手机号码来将彩信路由到不同的彩信中心，而MMSCInfo就
抽象的代表了一个彩信中心。因此在MSCRouter中存在着手机号码到MMSCInfo的映射，可以采用一个Map来存储

- 为什么要使用不可变对象设计模式来设计整个系统
   使用不可变对象的设计模式是为了解决在多线程的情况下的资源的冲突，在这个系统中路由表是被共享的，即存在冲突
   如果使用常规的写法就需要加锁
      >  synchronized {
              return routeMap.get(phone); // 更具手机好来路由信息
        }
        
    使用了锁就在一定程度上加重了系统的开销
    
    而对于像这些路由信息会有变化但是这些变化的频率不高，我们不希望通过锁来保证线程的安全，那么我们就可以使用
    不可变对象设计模式。
    
    
    
    
       
     